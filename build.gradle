plugins {
    id 'groovy-gradle-plugin'
    id 'jacoco'
}

group = "${rootProjectgroupId}"
version = "${rootProjectVersion}"

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    gradlePluginPortal()
}

subprojects.each {
subproject -> evaluationDependsOn(subproject.name)
}

jar {
    // disable the default jar task. A multi project jar is built with allJar task
    enabled = false
}

task allJar(type: Jar, dependsOn: subprojects.jar) {
    duplicatesStrategy = 'include'
    baseName = "${rootProjectName}"
    subprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
    }
}

artifacts {
    archives allJar
}

description = 'Keycloak Plugin Parent'


// https://stackoverflow.com/questions/57803277/run-checkstyles-in-subprojects-before-all-tests-in-all-subprojects
// Create a lifecycle task in the root project.
// make this depend on all checkstyle tasks from subprojects (see below)
def checkstyleAllTask = task("checkstyleAll")

// register task "listGradle" for CI pipeline
tasks.register('lintGradle') {
    dependsOn checkstyleAll
}

// Make 'lintGradle' task depend on lifecycle task
lintGradle.dependsOn(checkstyleAllTask)

subprojects {

    //CHECKSTYLE
    apply plugin: "checkstyle"

    // ignore all lint errors for test code
    checkstyleTest.exclude('**/**')

    checkstyle {
        toolVersion = '8.29'
        ignoreFailures = false
        showViolations = true
    }

    // Ensure all checkstyle tasks are a dependency of the "checkstyleAll" task
    checkstyleAllTask.dependsOn(tasks.withType(Checkstyle))

    tasks.withType(Test) {
        // Indicate that testing tasks should run after the "checkstyleAll" task
        shouldRunAfter(checkstyleAllTask)

        // Indicate that testing tasks should run after any checksytle tasks.
        // This is useful for when you only want to run an individual
        // subproject's checks (e.g. ./gradlew ::subprojA::check)
        shouldRunAfter(tasks.withType(Checkstyle))
    }

    // help with dependency tree research
    // ./gradlew allDeps
    task allDeps(type: DependencyReportTask) {}
}

allprojects {
    //DEPENDENCYCHECK
    apply plugin: "org.owasp.dependencycheck"
    dependencyCheck {
        format = "ALL"
    }
}

task jacocoMergeAll(type: JacocoMerge) {
    dependsOn(subprojects.test, subprojects.jacocoTestReport)
    subprojects.each { subproject ->
        // exclude runtime subproject because there is no integration tests
        if (subproject.name != 'runtime') {
            executionData subproject.tasks.withType(Test)
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(jacocoMergeAll)

    additionalSourceDirs.from =
            files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from =
            files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from =
            files(subprojects.sourceSets.main.output)
    executionData.from =
            files("${buildDir}/jacoco/jacocoMergeAll.exec")
    dependencyCheckAggregate
    reports {
        html.enabled true
        html.destination file("${buildDir}/jacoco/html/")
        csv.enabled false
        xml.enabled true
        xml.destination file("${buildDir}/jacoco/test.xml")
    }
}

// make jacocoRootReport run after jacocoTestReport
jacocoTestReport.finalizedBy(jacocoRootReport)

// aggregate dependencyCheck reports
dependencyCheckAnalyze.finalizedBy(dependencyCheckAggregate)
