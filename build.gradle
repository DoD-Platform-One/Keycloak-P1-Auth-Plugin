plugins {
    id 'groovy-gradle-plugin'
    id 'jacoco'
    id "org.sonarqube" version "5.1.0.4882"
}

group = "${rootProjectgroupId}"
version = "${rootProjectVersion}"

repositories {
    mavenCentral()
    maven { url = "https://plugins.gradle.org/m2/" }
    gradlePluginPortal()
}

// Evaluate subprojects early
subprojects.each { subproject ->
    evaluationDependsOn(subproject.name)
}

// Disable the default jar task (a multi-project jar is built with allJar)
jar {
    enabled = false
}

// Aggregate jar task for multi-project build
task allJar(type: Jar, dependsOn: subprojects.jar) {
    duplicatesStrategy = 'include'
    archiveBaseName = "${rootProjectName}"
    subprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect { zipTree(it) }
    }
}

artifacts {
    archives allJar
}

description = 'Keycloak Plugin Parent'

// ----- Checkstyle configuration -----
// Create a lifecycle task that depends on all Checkstyle tasks
def checkstyleAllTask = task("checkstyleAll")

tasks.register('lintGradle') {
    dependsOn checkstyleAllTask
}
lintGradle.dependsOn(checkstyleAllTask)

subprojects {
    // Apply the Checkstyle plugin
    apply plugin: "checkstyle"

    // Exclude all files for test Checkstyle if desired
    checkstyleTest.exclude('**/**')

    checkstyle {
        toolVersion = '10.20.0'
        showViolations = true
        ignoreFailures = false
    }

    // Make all Checkstyle tasks part of the lifecycle task
    checkstyleAllTask.dependsOn(tasks.withType(Checkstyle))

    tasks.withType(Test) {
        // Ensure tests run after Checkstyle tasks
        shouldRunAfter(checkstyleAllTask)
        shouldRunAfter(tasks.withType(Checkstyle))
        // Example: Uncomment if you need additional JVM arguments
        // jvmArgs += ["--add-opens", "java.base/java.lang=ALL-UNNAMED"]
    }

    tasks.withType(AbstractCompile) {
        // Example: Uncomment to add compiler arguments
        // options.compilerArgs += ["--add-opens", "java.base/java.lang=ALL-UNNAMED"]
    }

    // Task for generating dependency reports
    task allDeps(type: DependencyReportTask) {}
}

// ----- Dependency-Check Configuration -----
allprojects {
    // Apply the dependency-check plugin only once
    apply plugin: "org.owasp.dependencycheck"
    dependencyCheck {
        autoUpdate = false
        format = "ALL"
        nvd {
            // Use the environment variable if set
            apiKey = System.getenv('NVD_API_KEY')
            //delay = 500
            //autoUpdate = false
        }
    }
}

// ----- Jacoco Reporting Configuration -----
task jacocoReport(type: JacocoReport) {
    dependsOn(subprojects.test, subprojects.jacocoTestReport)
    subprojects.each { subproject ->
        // Exclude 'runtime' subproject if there are no integration tests
        if (subproject.name != 'runtime') {
            executionData subproject.tasks.withType(Test)
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn jacocoReport

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files("${buildDir}/jacoco/jacocoMergeAll.exec")
    // Ensure dependency-check aggregate runs as part of this report
    dependencyCheckAggregate
    reports {
        html {
            required = true
            destination = file("${buildDir}/jacoco/html/")
        }
        xml {
            required = true
            destination = file("${buildDir}/jacoco/test.xml")
        }
        csv {
            required = false
        }
    }

    // Optionally, create a task to package the report as a jar
    task owaspCheck(type: Jar) {
        dependsOn tasks.findByName("dependencyCheckAnalyze")
    }
}

// Ensure jacocoRootReport runs after jacocoTestReport
jacocoTestReport.finalizedBy jacocoRootReport

// Aggregate dependency-check reports
dependencyCheckAnalyze.finalizedBy dependencyCheckAggregate

test {
    // Set system property for JBoss Log Manager to avoid test errors
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
